---
title: "lowess"
format: html
execute: 
  echo: true
---

```{r}
#| message: False

library(tidyverse)

```

1.

```{r}
set.seed(1)

#======= generate data =======#
n <- 100
x <- 1:n

e <- rnorm(n, mean = 0, sd = 0.2)
y <- sin(x/10) + e
```

2.  

```{r}

nearest <- function(dists, k){
  # sorts smallest to largest, 
  # and slices out the k nearest neighbours
  sorted <- sort(dists)
  d_max <- sorted[k+1] |> unname()
  neighbours <- names(sorted)[2:(k+1)] |> as.integer()
  
  return(data.frame('vals' = c('x' = neighbours,'d' = d_max)))
}


# f: (0,1)
# y^ = f(x)
customLowess <- function(x, y, f){
  
  #======= calculate span =======#
  n <- length(x)
  k <- ceiling(f*n)
  #======= calculate weights =======#
  # using the 'tricube kernel'
  
  distances <- cbind(x,y) |> dist(method = 'euclidean') |>
    as.matrix()
  
  neighs <- apply(distances,1,nearest,k=k,simplify=TRUE) |>
    as.data.frame()
  colnames(neighs) <- 1:n
  
  #split output of custom 'nearest' function into 
  # a matrix of neighbours (ints)
  # and a vector of d_maxes
  nval <- nrow(neighs)
  neighbours <- neighs[-nval,] |> t()
  d_max <- neighs[nval,] |> t()
  
  #since each row i in neighbours represents the neighbours of 
  # the x_ith point, we can use 1:n to simply get the set of x_is
  
  w_ij <- (1-(abs((1:n)-neighbours)/(d_max %*% rep(1,k)))^3)^3
  
  
  # test_xi <- 50
  # test_data <- full_data[test_xi, ]
  # ests_test <- custom_estimate(test_data, y)
  # 
  # print(ests_test)  # Your custom regression estimate for x = 50

  smoothed <- matrix(as.numeric(NA),nrow=n,ncol=2) 
  for (i in 1:n){
    w_js <- w_ij[i,]
    neighs <- neighbours[i,] |> as.integer()
    
    X <- cbind(1,neighs)
    y_vec <- matrix(y[neighs],ncol=1)
    
    W <- diag(w_js)
  
    #======= weighted regression =======#
    ests <- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y_vec
   
    y_est <- ests[1] + ests[2]*i
    
    smoothed[i,] <- (c(i,y_est))
  }

  return(smoothed)
  
}
```



3.  

```{r}
f <- 0.3
model_custom <- customLowess(x=x,y=y,f=f) |> as_tibble()
lo <- lowess(x=x,y=y,f=f,iter=0)$y
ggplot(data=tibble(x,y), aes(x=x,y=y)) +
  geom_point() +
  geom_line(data=model_custom,aes(x=V1,y=V2), colour = "red") +
  geom_line(aes(y=lo),colour="blue")
  # geom_smooth(formula = y ~ x, 
  #             method = "loess",
  #             colour = "blue",
  #             method.args = list(degree = 1,
  #                                span=f,
  #                                surface="direct",
  #                                statistics="exact"
  #                                )
  #             )
```

```{r}
# {
# plot(x, y, pch = 16, cex = 0.5)
# lines(model_custom, col = 'red', type = 'l', lwd = 2)
# lines(model_lowess, col = 'blue', type = 'l', lwd = 2)
# legend("topright", legend = c("Custom LOWESS", "Built-in LOWESS"),
#        col = c("red", "blue"), lty = 1, lwd = 2)
# }

#the following is tested to be equivalent
#loess(formula=y~x,degree=1,span=f)$fitted |> plot()
#lowess(x,y,f=f,iter=0) |> plot()
#loess.smooth(x=x,y=y,span=f,evaluation=n) |> plot()
```


